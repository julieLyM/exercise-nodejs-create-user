{
  "swagger": "2.0",
  "info": {
    "description": "This is a sample server a store server.  You can find out more about     Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).      For this sample, you can use the api key `special-key` to test the authorization     filters.",
    "version": "1.0.0",
    "title": "Swagger Movie",
    "termsOfService": "http://swagger.io/terms/",
    "contact": {
      "email": "apiteam@swagger.io"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "host": "localhost:5001",
  "tags": [{
    "name": "movie",
    "description": "Everything about your Movies",
    "externalDocs": {
      "description": "Find out more",
      "url": "http://localhost:5001/"
    }
  }],
  "schemes": [
    "http"
  ],
  "paths": {
    "/movie": {
      "get": {
        "tags": [
          "movie"
        ],
        "summary": "List of all movies",
        "description": "",
        "operationId": "all Movie",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "post": {
        "tags": [
          "movie"
        ],
        "summary": "Add a new movie to the store",
        "description": "add a movie",
        "operationId": "addMovie",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [{
          "in": "body",
          "name": "body",
          "description": "List of user object",
          "required": true,
          "schema": {
            "type": "object",
            "properties": {
              "title": {
                "description": "update a title of the movie",
                "type": "string"
              },
              "value": {
                "description": "value of the movie",
                "type": "string"
              }
            }
          }
        }],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/movie/{movieId}": {
      "put": {
        "tags": [
          "movie"
        ],
        "summary": "Updates a movie in the store with form data",
        "description": "",
        "operationId": "updatePetWithForm",
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [{
            "name": "movieId",
            "in": "path",
            "description": "ID needs to be updated",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "name",
            "in": "formData",
            "description": "Updated name of the movie",
            "required": false,
            "type": "string"
          },
          {
            "name": "status",
            "in": "formData",
            "description": "Updated status of the movie",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "get": {
        "tags": [
          "movie"
        ],
        "summary": "get a movie",
        "description": "",
        "operationId": "getMovie",
        "produces": [
          "application/json"
        ],
        "parameters": [{
            "name": "api_key",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "movieId",
            "in": "path",
            "description": "get movie id",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Movie not found"
          }
        }
      },
      "delete": {
        "tags": [
          "movie"
        ],
        "summary": "Deletes a movie",
        "description": "",
        "operationId": "deleteMovie",
        "produces": [
          "application/json"
        ],
        "parameters": [{
            "name": "api_key",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "movieId",
            "in": "path",
            "description": "Movie id to delete",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Movie not found"
          }
        }
      },
      "patch": {
        "tags": [
          "movie"
        ],
        "summary": "Update a part of the body of the movie in the store with form data",
        "description": "",
        "operationId": "updateAPartOfMovieWithForm",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [{
            "name": "movieId",
            "in": "path",
            "description": "ID of movie that needs to be updated",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "List of user object",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "title": {
                  "description": "update a title of the movie",
                  "type": "string"
                },
                "value": {
                  "description": "value of the movie",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    }
  }
}